using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

public class Program
{
    private static readonly Dictionary<string, Func<Task>> TaskDict = new Dictionary<string, Func<Task>>
{
    { "1", Task1 },
    { "2", Task2 }
};

    public static async Task Main(string[] args)
    {
        Console.OutputEncoding = Encoding.UTF8;

        while (true)
        {
            Console.WriteLine("Выберите задачу для выполнения:");
            foreach (var entry in TaskDict.Keys)
                Console.WriteLine($"{entry} - Задача {entry}");
            Console.WriteLine("0 - Выйти");

            string choice = Console.ReadLine();
            if (choice == "0")
            {
                Console.WriteLine("Выход из программы.");
                break;
            }
            if (TaskDict.TryGetValue(choice, out var selectedTask))
            {
                await selectedTask();
                Console.WriteLine("Задача завершена.");
            }
            else
            {
                Console.WriteLine("Некорректный ввод. Попробуйте еще раз.");
            }

            Console.WriteLine("");
        }
    }

    static async Task Task1()
    {
        Console.WriteLine("Задача 1: Работа с массивом месяцев");

        string[] months = { "Июнь", "Июль", "Май", "Декабрь", "Январь", "Февраль", "Март", "Апрель", "Август", "Сентябрь", "Октябрь", "Ноябрь" };

        int n = 4;
        var monthsWithLengthN = months.Where(month => month.Length == n);
        Console.WriteLine($"Месяцы с длиной строки {n}: {string.Join(", ", monthsWithLengthN)}");

        var summerAndWinterMonths = months.Where(month => month == "Июнь" || month == "Июль" || month == "Август" ||
                                                           month == "Декабрь" || month == "Январь" || month == "Февраль");
        Console.WriteLine($"Летние и зимние месяцы: {string.Join(", ", summerAndWinterMonths)}");

        var sortedMonths = months.OrderBy(month => month);
        Console.WriteLine("Месяцы в алфавитном порядке: " + string.Join(", ", sortedMonths));

        var monthsWithU = months.Count(month => month.Contains("u") && month.Length >= 4);
        Console.WriteLine($"Количество месяцев, содержащих 'u' и длиной не менее 4 символов: {monthsWithU}");

        await Task.CompletedTask;
    }

    static async Task Task2()
    {
        Console.WriteLine("Задача 2: Работа с коллекцией книг");

        var books = new List<Book>
        {
            new Book("Война и мир", "Лев Толстой", 1869, 1225, 1500),
            new Book("Преступление и наказание", "Федор Достоевский", 1866, 671, 900),
            new Book("Мастер и Маргарита", "Михаил Булгаков", 1967, 480, 700),
            new Book("Анна Каренина", "Лев Толстой", 1878, 864, 1200),
            new Book("Отцы и дети", "Иван Тургенев", 1862, 304, 500)
        };

        string author = "Лев Толстой";
        var booksByAuthor = books.Where(book => book.Author == author);
        Console.WriteLine($"\nКниги автора {author}:");
        foreach (var book in booksByAuthor)
        {
            Console.WriteLine(book);
        }

        int year = 1900;
        var booksAfterYear = books.Where(book => book.Year > year);
        Console.WriteLine($"\nКниги, выпущенные после {year} года:");
        foreach (var book in booksAfterYear)
        {
            Console.WriteLine(book);
        }

        var thinnestBook = books.OrderBy(book => book.Pages).FirstOrDefault();
        Console.WriteLine($"\nСамая тонкая книга: {thinnestBook}");

        var top5ThickestBooks = books.OrderByDescending(book => book.Pages).Take(5);
        Console.WriteLine("\n5 самых толстых книг:");
        foreach (var book in top5ThickestBooks)
        {
            Console.WriteLine(book);
        }

        var booksSortedByPrice = books.OrderBy(book => book.Price);
        Console.WriteLine("\nКниги, отсортированные по цене:");
        foreach (var book in booksSortedByPrice)
        {
            Console.WriteLine(book);
        }

        await Task.CompletedTask;
    }
}

public class Book
{
    private string _title;
    private string _author;
    private int _year;
    private int _pages;
    private decimal _price;

    public string Title
    {
        get => _title;
        set
        {
            if (string.IsNullOrWhiteSpace(value))
                throw new ArgumentException("Название книги не может быть пустое.");
            _title = value;
        }
    }

    public string Author
    {
        get => _author;
        set
        {
            if (string.IsNullOrWhiteSpace(value))
                throw new ArgumentException("Имя автора не может быть пустое.");
            _author = value;
        }
    }

    public int Year
    {
        get => _year;
        set
        {
            if (value < 0 || value > DateTime.Now.Year)
                throw new ArgumentOutOfRangeException("Год издания некорректен.");
            _year = value;
        }
    }

    public int Pages
    {
        get => _pages;
        set
        {
            if (value <= 0)
                throw new ArgumentOutOfRangeException("Количество страниц должно быть положительное.");
            _pages = value;
        }
    }

    public decimal Price
    {
        get => _price;
        set
        {
            if (value < 0)
                throw new ArgumentOutOfRangeException("Цена не может быть отрицательное.");
            _price = value;
        }
    }

    public Book(string title, string author, int year, int pages, decimal price)
    {
        Title = title;
        Author = author;
        Year = year;
        Pages = pages;
        Price = price;
    }

    public override string ToString()
    {
        return $"{Title} - {Author}, {Year} год, {Pages} стр., Цена: {Price} руб.";
    }
}
