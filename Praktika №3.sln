using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Text;
using System.Threading.Tasks;

public class Program
{
    static async Task Main(string[] args)
    {
        Console.OutputEncoding = Encoding.UTF8;
        while (true) // Бесконечный цикл
        {
            Console.WriteLine("Выберите задачу для выполнения:");
            Console.WriteLine("1 - Задача 1: Работа с ArrayList");
            Console.WriteLine("2 - Задача 2: Работа с Dictionary и Queue");
            Console.WriteLine("3 - Задача 3: Работа с пользовательским типом данных Product");
            Console.WriteLine("4 - Задача 4: Работа с ObservableCollection");
            Console.WriteLine("0 - Выйти");

            string choice = Console.ReadLine();
            Task selectedTask = null;

            switch (choice)
            {
                case "1":
                    selectedTask = Task1();
                    break;
                case "2":
                    selectedTask = Task2();
                    break;
                case "3":
                    selectedTask = Task3();
                    break;
                case "4":
                    selectedTask = Task4();
                    break;
                case "0":
                    Console.WriteLine("Выход из программы.");
                    return;
                default:
                    Console.WriteLine("Некорректный ввод. Попробуйте еще раз.");
                    break;
            }

            if (selectedTask != null)
            {
                await selectedTask;
                Console.WriteLine("Задача завершена.");
            }

            Console.WriteLine("");
        }
    }

    static async Task Task1()
    {
        // Задание 1: Работа с необобщенной коллекцией ArrayList
        ArrayList arrayList = new ArrayList();
        Random random = new Random();

        // a) Заполнение ArrayList 5 случайными числами
        for (int i = 0; i < 5; i++)
        {
            arrayList.Add(random.Next(1, 100));
        }

        // b) Добавление строки
        arrayList.Add("Пример строки");

        // c) Удаление заданного элемента (удалим первый элемент)
        arrayList.RemoveAt(0);

        // d) Вывод количества элементов и коллекции на консоль
        Console.WriteLine("Задание 1: ArrayList");
        Console.WriteLine($"Количество элементов: {arrayList.Count}");
        Console.WriteLine("Коллекция ArrayList:");
        foreach (var item in arrayList)
        {
            Console.WriteLine(item);
        }

        // e) Поиск заданного значения
        Console.Write("Введите значение для поиска в ArrayList: ");
        var searchValue = Console.ReadLine();
        bool found = arrayList.Contains(searchValue);
        Console.WriteLine(found ? "Значение найдено" : "Значение не найдено");
    }

    static async Task Task2()
    {
        // Задание 2: Обобщенные коллекции Dictionary и Queue
        Dictionary<int, double> dictionary = new Dictionary<int, double>();
        Random random = new Random();

        // Заполнение Dictionary данными
        for (int i = 0; i < 5; i++)
        {
            dictionary.Add(i, random.NextDouble() * 100);
        }

        // a) Вывод Dictionary на консоль
        Console.WriteLine("\nЗадание 2: Dictionary<int, double>");
        foreach (var kvp in dictionary)
        {
            Console.WriteLine($"{kvp.Key}: {kvp.Value}");
        }

        // b) Удаление n элементов из Dictionary
        for (int i = 0; i < 2; i++)
        {
            dictionary.Remove(i);
        }

        // c) Добавление других элементов
        dictionary[10] = 55.5;
        dictionary[11] = 65.7;

        // Создание Queue и заполнение данными из Dictionary
        Queue<double> queue = new Queue<double>();
        foreach (var item in dictionary.Values)
        {
            queue.Enqueue(item);
        }

        // e) Вывод Queue на консоль
        Console.WriteLine("\nQueue<double>:");
        foreach (var item in queue)
        {
            Console.WriteLine(item);
        }

        // f) Поиск заданного значения в Queue
        Console.Write("Введите значение для поиска в Queue: ");
        double search = double.Parse(Console.ReadLine());
        bool found = queue.Contains(search);
        Console.WriteLine(found ? "Значение найдено" : "Значение не найдено");
    }

    static async Task Task3()
    {
        // Задание 3: Работа с пользовательским типом данных и интерфейсами
        List<Product> products = new List<Product>
        {
            new Product("Ноутбук", 89000),
            new Product("Планшет", 99990),
            new Product("Смартфон", 189999)
        };

        // Вывод коллекции продуктов
        Console.WriteLine("\nЗадание 3: Коллекция продуктов:");
        foreach (var product in products)
        {
            Console.WriteLine(product);
        }

        // Сортировка и вывод отсортированной коллекции
        products.Sort();
        Console.WriteLine("\nОтсортированная коллекция:");
        foreach (var product in products)
        {
            Console.WriteLine(product);
        }

        // Клонирование объекта
        Product clonedProduct = (Product)products[0].Clone();
        Console.WriteLine("\nКлонированный объект:");
        Console.WriteLine(clonedProduct);
    }

    static async Task Task4()
    {
        // Задание 4: Работа с ObservableCollection
        ObservableCollection<string> observableCollection = new ObservableCollection<string>();

        // Регистрация обработчика событий
        observableCollection.CollectionChanged += OnCollectionChanged;

        // Добавление и удаление элементов для демонстрации
        observableCollection.Add("Элемент 1");
        observableCollection.Add("Элемент 2");
        observableCollection.Remove("Элемент 1");
    }

    // Метод для события CollectionChanged в ObservableCollection
    private static void OnCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.Action == NotifyCollectionChangedAction.Add)
        {
            Console.WriteLine("Добавлен элемент: " + e.NewItems[0]);
        }
        else if (e.Action == NotifyCollectionChangedAction.Remove)
        {
            Console.WriteLine("Удален элемент: " + e.OldItems[0]);
        }
    }
}

// Пользовательский класс Product с реализацией интерфейсов IComparable, ICloneable
public class Product : IComparable<Product>, ICloneable
{
    public string Name { get; set; }
    public double Price { get; set; }

    public Product(string name, double price)
    {
        Name = name;
        Price = price;
    }

    public int CompareTo(Product other)
    {
        return Price.CompareTo(other.Price);
    }

    public object Clone()
    {
        return new Product(Name, Price);
    }

    public override string ToString()
    {
        return $"{Name} - Цена: {Price} руб.";
    }
}

public class ProductComparer : IComparer<Product>
{
    public int Compare(Product x, Product y)
    {
        return x.Price.CompareTo(y.Price);
    }
}
